let board1 = [
  ["5", "3", "6", ".", "7", ".", ".", ".", "."],
  [".", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", "9", "2", "8", "."],
  [".", ".", ".", "4", "1", ".", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
];
// Output: true
// Example 2:

let board2 = [
  ["8", "3", ".", "7", "7", ".", ".", ".", "."],
  ["6", ".", ".", "1", "9", "5", ".", ".", "."],
  [".", "9", "8", ".", ".", ".", ".", "6", "."],
  ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
  ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
  ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
  [".", "6", ".", ".", ".", ".", "2", "8", "."],
  [".", ".", ".", "4", "1", "9", ".", ".", "5"],
  [".", ".", ".", ".", "8", ".", ".", "7", "9"],
];
// Output: false
// Explanation: Same as Example 1, except with the
// 5 in the top left corner being modified to 8.
//  Since there are two 8's in the top left 3x3 sub-box, it is invalid.
let board3 = [
  [".", ".", ".", ".", ".", ".", "5", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", "."],
  ["9", "3", ".", ".", "2", ".", "4", ".", "."],
  [".", ".", "7", ".", ".", ".", "3", ".", "."],
  [".", ".", ".", ".", ".", ".", ".", ".", "."],
  [".", ".", ".", "3", "4", ".", ".", ".", "."],
  [".", ".", ".", ".", ".", "3", ".", ".", "."],
  [".", ".", ".", ".", ".", "5", "2", ".", "."],
];
var isValidSudoku = function (board) {
  for (let i = 0; i < board.length; i++) {
    let rowArr = board[i].filter((e) => +e);
    let rowSet = new Set(rowArr);
    if (rowArr.length !== rowSet.size) {
      return false;
    }
    let colMap = new Map();
    let box = new Set();

    for (let j = 0; j < board.length; j++) {
      if (+board[j][i]) {
        if (colMap.get(board[j][i]) === undefined) {
          colMap.set(board[j][i], i);
        } else {
          return false;
        }
      }
      let _box =
        board[3 * Math.floor(i / 3) + Math.floor(j / 3)][3 * (i % 3) + (j % 3)];

      if (_box != ".") {
        if (box.has(_box)) return false;
        box.add(_box);
      }
    }
  }
  return true;
};
console.log(isValidSudoku(board3));
